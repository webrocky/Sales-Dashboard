import streamlit as st
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
from statsmodels.tsa.holtwinters import ExponentialSmoothing
from statsmodels.tsa.arima.model import ARIMA
import datetime

# Function to load and process data
@st.cache_data
def load_data(file):
    xls = pd.ExcelFile(file)
    orders = pd.read_excel(xls, 'Orders')
    returns = pd.read_excel(xls, 'Returns')
    
    # Merge orders and returns data to include return status in orders
    returns['Returned'] = True
    orders = pd.merge(orders, returns[['Order ID', 'Returned']], on='Order ID', how='left')
    orders['Returned'].fillna(False, inplace=True)
    
    # Convert Order Date to datetime
    orders['Order Date'] = pd.to_datetime(orders['Order Date'])
    orders['Ship Date'] = pd.to_datetime(orders['Ship Date'])
    
    return orders

# Function to calculate KPIs
def calculate_kpis(data):
    total_profit = data['Profit'].sum()
    total_sales = data['Sales'].sum()
    profit_by_region = data.groupby('Region')['Profit'].sum().reset_index()
    total_returns = data['Returned'].sum()
    sales_by_category = data.groupby('Category')['Sales'].sum().reset_index()
    sales_distribution_by_segment = data.groupby('Segment')['Sales'].sum().reset_index()
    
    return total_profit, total_sales, profit_by_region, total_returns, sales_by_category, sales_distribution_by_segment

# Function to create forecast using ARIMA
def create_arima_forecast(data, column, periods):
    model = ARIMA(data[column], order=(5,1,0))
    fit = model.fit()
    forecast = fit.forecast(periods)
    return forecast

# Function to calculate Customer Lifetime Value (CLTV)
def calculate_cltv(data):
    cltv_data = data.groupby('Customer ID').agg({
        'Sales': 'sum',
        'Order ID': 'count',
        'Profit': 'sum'
    }).reset_index()
    cltv_data['CLTV'] = cltv_data['Sales'] * cltv_data['Order ID'] * cltv_data['Profit']
    return cltv_data

# Function to load CSS
def load_css(file_name):
    with open(file_name) as f:
        st.markdown(f'<style>{f.read()}</style>', unsafe_allow_html=True)
                    

# Function to handle Q&A
def handle_question(question, data):
    if question == "What is the total profit?":
        return f"The total profit is ${data['Profit'].sum():,.2f}."
    elif question == "Which region is most profitable?":
        return f"The most profitable region is {data.groupby('Region')['Profit'].sum().idxmax()}."
    elif question == "What is the total number of returns?":
        return f"The total number of returns is {data['Returned'].sum()}."
    elif question == "How can we increase sales?":
        return "Increase sales by targeting high-performing segments with personalized marketing, optimizing pricing strategies, and enhancing product availability."
    elif question == "How can we reduce returns?":
        return "Reduce returns by improving product descriptions, offering quality assurance, and enhancing customer support."
    else:
        return "Sorry, I don't have an answer to that question."



# Streamlit UI
st.title('Advanced Sales Dashboard')
st.sidebar.title('Upload Your Data')
uploaded_file = st.sidebar.file_uploader('Upload Excel file', type='xlsx')




st.sidebar.header('Do you have any questions regarding the dashboard?')
question = st.sidebar.selectbox('Select a question', [
    "What is the total profit?",
    "Which region is most profitable?",
    "What is the total number of returns?",
    "How can we increase sales?",
    "How can we reduce returns?",
    "Which category has the highest sales?",
    "What is the customer lifetime value (CLTV)?"
])

if st.sidebar.button('Get Answer'):
    if uploaded_file:
        data = load_data(uploaded_file)
        answer = handle_question(question, data)
        st.sidebar.write(answer)
    else:
        st.sidebar.write("Please upload a data file to get an answer.")

st.sidebar.header('Forecast Settings')
forecast_periods = st.sidebar.slider('Select number of months for forecast', 1, 24, 12)

if uploaded_file:
    data = load_data(uploaded_file)
    total_profit, total_sales, profit_by_region, total_returns, sales_by_category, sales_distribution_by_segment = calculate_kpis(data)
    
    st.header('Key Performance Indicators (KPIs)')
    st.metric('Total Profit', f'${total_profit:,.2f}')
    st.metric('Total Sales', f'${total_sales:,.2f}')
    st.metric('Total Returns', total_returns)
    
    st.header('Visualizations')
    
    # Profit by Region
    st.subheader('Profit by Region')
    fig1 = px.bar(profit_by_region, x='Region', y='Profit', title='Profit by Region', color='Region')
    st.plotly_chart(fig1)
    st.markdown("**Explanation:** This chart shows the profit generated by each region. This insight helps to identify the regions with the highest profitability, allowing the company to focus its marketing and sales efforts on those areas.")
    st.markdown("**Decision:** Increase marketing spend in the top-performing regions to maximize profit. Consider investigating and addressing issues in lower-performing regions.")
    
    if st.button('More on Profit by Region'):
        fig1_2 = px.pie(profit_by_region, names='Region', values='Profit', title='Profit Distribution by Region')
        st.plotly_chart(fig1_2)
        fig1_3 = px.line(profit_by_region, x='Region', y='Profit', title='Profit Trend by Region', markers=True)
        st.plotly_chart(fig1_3)
    
    # Sales by Category
    st.subheader('Sales by Category')
    fig2 = px.pie(sales_by_category, names='Category', values='Sales', title='Sales by Category')
    st.plotly_chart(fig2)
    st.markdown("**Explanation:** This pie chart illustrates the distribution of sales across different product categories. Understanding which categories drive the most sales can help prioritize inventory and promotions.")
    st.markdown("**Decision:** Stock more inventory for the highest-selling categories and create targeted promotions to boost sales in less popular categories.")
    
    if st.button('More on Sales by Category'):
        fig2_2 = px.bar(sales_by_category, x='Category', y='Sales', title='Sales by Category', color='Category')
        st.plotly_chart(fig2_2)
        fig2_3 = px.line(sales_by_category, x='Category', y='Sales', title='Sales Trend by Category', markers=True)
        st.plotly_chart(fig2_3)
    
    # Sales Distribution by Customer Segment
    st.subheader('Sales Distribution by Customer Segment')
    fig3 = px.histogram(sales_distribution_by_segment, x='Segment', y='Sales', title='Sales Distribution by Customer Segment', color='Segment')
    st.plotly_chart(fig3)
    st.markdown("**Explanation:** This histogram shows how sales are distributed among different customer segments. This insight can help tailor marketing strategies to different customer segments based on their purchasing behavior.")
    st.markdown("**Decision:** Develop customized marketing campaigns for each customer segment to increase engagement and sales.")
    
    if st.button('More on Sales Distribution by Customer Segment'):
        fig3_2 = px.pie(sales_distribution_by_segment, names='Segment', values='Sales', title='Sales Distribution by Segment')
        st.plotly_chart(fig3_2)
        fig3_3 = px.line(sales_distribution_by_segment, x='Segment', y='Sales', title='Sales Trend by Segment', markers=True)
        st.plotly_chart(fig3_3)
    
    # Resample data monthly and sum numeric columns
    monthly_data = data.resample('M', on='Order Date').sum(numeric_only=True)
    
    # Forecasted Sales using ARIMA
    st.subheader('Forecasted Sales')
    forecasted_sales = create_arima_forecast(monthly_data, 'Sales', forecast_periods)
    forecasted_sales_fig = go.Figure()
    forecasted_sales_fig.add_trace(go.Scatter(x=monthly_data.index, y=monthly_data['Sales'], mode='lines', name='Historical Sales'))
    forecasted_sales_fig.add_trace(go.Scatter(x=pd.date_range(start=monthly_data.index[-1], periods=forecast_periods, freq='M'), y=forecasted_sales, mode='lines', name='Forecasted Sales'))
    forecasted_sales_fig.update_layout(title='Sales Forecast', xaxis_title='Date', yaxis_title='Sales')
    st.plotly_chart(forecasted_sales_fig)
    st.markdown("**Explanation:** This line chart displays the historical sales data along with the forecasted sales for the selected period. Forecasting helps in planning inventory, budgeting, and setting realistic sales targets.")
    st.markdown("**Decision:** Use the forecasted sales data to optimize inventory levels, plan marketing campaigns, and set achievable sales targets.")

    # Forecasted Profit using ARIMA
    st.subheader('Forecasted Profit')
    forecasted_profit = create_arima_forecast(monthly_data, 'Profit', forecast_periods)
    forecasted_profit_fig = go.Figure()
    forecasted_profit_fig.add_trace(go.Scatter(x=monthly_data.index, y=monthly_data['Profit'], mode='lines', name='Historical Profit'))
    forecasted_profit_fig.add_trace(go.Scatter(x=pd.date_range(start=monthly_data.index[-1], periods=forecast_periods, freq='M'), y=forecasted_profit, mode='lines', name='Forecasted Profit'))
    forecasted_profit_fig.update_layout(title='Profit Forecast', xaxis_title='Date', yaxis_title='Profit')
    st.plotly_chart(forecasted_profit_fig)
    st.markdown("**Explanation:** This line chart displays the historical profit data along with the forecasted profit for the selected period. Forecasting profits aids in financial planning, investment decisions, and evaluating business performance.")
    st.markdown("**Decision:** Leverage the forecasted profit data to make informed financial decisions, allocate resources efficiently, and identify potential areas for cost reduction.")

    # Heatmap of Sales by Region and Category
    st.subheader('Sales Heatmap by Region and Category')
    sales_heatmap_data = data.pivot_table(index='Region', columns='Category', values='Sales', aggfunc='sum')
    fig4 = px.imshow(sales_heatmap_data, color_continuous_scale='Viridis', title='Sales Heatmap by Region and Category')
    st.plotly_chart(fig4)
    st.markdown("**Explanation:** This heatmap visualizes the sales distribution across different regions and categories. High values are indicated by darker colors. It helps in identifying the best-performing combinations of region and category.")
    st.markdown("**Decision:** Focus on the high-performing region-category combinations for marketing and inventory stocking. Investigate the low-performing combinations to identify and address underlying issues.")

    # Pareto Chart for Sales by Category
    st.subheader('Pareto Chart for Sales by Category')
    sales_by_category_sorted = sales_by_category.sort_values(by='Sales', ascending=False)
    sales_by_category_sorted['Cumulative Percentage'] = sales_by_category_sorted['Sales'].cumsum() / sales_by_category_sorted['Sales'].sum() * 100
    fig5 = go.Figure()
    fig5.add_trace(go.Bar(x=sales_by_category_sorted['Category'], y=sales_by_category_sorted['Sales'], name='Sales'))
    fig5.add_trace(go.Scatter(x=sales_by_category_sorted['Category'], y=sales_by_category_sorted['Cumulative Percentage'], name='Cumulative Percentage', yaxis='y2'))
    fig5.update_layout(
        title='Pareto Chart for Sales by Category',
        xaxis_title='Category',
        yaxis_title='Sales',
        yaxis2=dict(title='Cumulative Percentage', overlaying='y', side='right')
    )
    st.plotly_chart(fig5)
    st.markdown("**Explanation:** The Pareto chart helps in identifying the categories that contribute the most to the total sales. The cumulative percentage line indicates the contribution of each category to the overall sales.")
    st.markdown("**Decision:** Focus on the top categories that contribute to 80% of the sales (Pareto Principle) for marketing and inventory planning. Consider strategies to boost sales in the lower-performing categories.")

    # Sales Funnel
    st.subheader('Sales Funnel')
    funnel_data = data.groupby('Segment').agg({
        'Order ID': 'nunique',
        'Sales': 'sum'
    }).reset_index().sort_values(by='Sales', ascending=False)
    fig6 = go.Figure(go.Funnel(
        y=funnel_data['Segment'],
        x=funnel_data['Sales'],
        textinfo="value+percent initial"
    ))
    fig6.update_layout(title='Sales Funnel by Customer Segment')
    st.plotly_chart(fig6)
    st.markdown("**Explanation:** The sales funnel chart visualizes the sales process by customer segment, from order placement to sales completion. It helps in understanding the conversion rates and identifying bottlenecks in the sales process.")
    st.markdown("**Decision:** Improve the conversion rates by enhancing customer engagement, providing personalized offers, and improving the sales process for segments with lower conversion rates.")
else:
    st.markdown("### Welcome to the Advanced Sales Dashboard")
    st.markdown("This dashboard is designed to help superstores analyze their sales data effectively. By uploading your sales data, you can gain insights into key performance indicators (KPIs), forecast future sales and profits, and explore various visualizations.")
    st.markdown("#### How this dashboard helps in business growth:")
    st.markdown("- **KPI Analysis:** Monitor essential KPIs like total sales, total profit, and return rates to understand business performance.")
    st.markdown("- **Predictive Analysis:** Forecast future sales and profits to make informed decisions about inventory, marketing, and budgeting.")
    st.markdown("- **Customer Insights:** Analyze sales distribution by customer segments to tailor marketing strategies and improve customer satisfaction.")
    st.markdown("- **Product Insights:** Identify top-performing products and categories to optimize inventory and maximize sales.")
    st.markdown("- **Region Insights:** Understand regional performance to allocate resources and efforts where they are most needed.")

    st.markdown("### Do you have any questions regarding the dashboard?")
    st.markdown("Select a question from the dropdown menu on the left to get answers based on your data.")
